{#
    Shopping/index.twigに追記
    {{ include('@Stripe4/credit.twig', ignore_missing=true) }}
#}
{% if Order.Payment.getMethodClass == 'Plugin\\Stripe4\\Service\\Method\\CreditCard' %}
    <div class="ec-orderPayment">
        <div class="ec-rectHeading">
            <h2>クレジットカード情報</h2>

            <script src="https://js.stripe.com/v3/"></script>
            <div class="form-row">
                <div class="form-group">
                    <div id="card" class="form-control">
                        <!-- ここにクレジットカード番号入力欄が挿入される -->
                    </div>
                </div>

                <div class="ec-radio">
                    {{ form_widget(form.is_saving_card) }}
                </div>

                <!-- ここにエラーメッセージが表示される -->
                <div id="card-errors" class="text-danger small mb-lg-5" role="alert"></div>

                {{ form_widget(form.stripe_payment_intent_id) }}
            </div>
        </div>

        <script>
            var stripe = Stripe('{{ stripe_public_key }}');
            var elements = stripe.elements();

            // スタイルのカスタマイズ
            var style = {
                base: {
                    color: '#32325d',
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    '::placeholder': {
                        color: '#aab7c4'
                    }
                },
                invalid: {
                    color: '#fa755a',
                    iconColor: '#fa755a'
                }
            };

            // クレジットカード情報入力欄の構築
            const card = elements.create('card', {style: style, hidePostalCode: true});
            card.mount("#card");

            // 入力変更時のリスナー
            // バリデーションメッセージを表示する
            card.addEventListener('change', function (event) {
                const displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });

            window.addEventListener("load", stripeCheckoutHandler, false);

            function stripeCheckoutHandler(e) {
                const selector = '#shopping-form > div > div.ec-orderRole__summary > div > div.ec-totalBox__btn > button';
                const jsInitCheckTimer = setInterval(jsLoaded, 1000);

                function jsLoaded() {
                    if (document.querySelector(selector) != null) {
                        clearInterval(jsInitCheckTimer);
                    }
                    // submit時のリスナー
                    var button = document.querySelector(selector);
                    button.addEventListener('click', async (event) => {
                        event.preventDefault();

                        const isSavingCard = $('#{{ form.is_saving_card.vars.id }} input[type="checkbox"]').is(":checked");

                        stripePaymentHandler(card, isSavingCard);
                    });
                }
            }

            function stripePaymentHandler(card, isSavingCard) {
                stripe
                    .createPaymentMethod({
                        type: 'card',
                        card: card,
                        billing_details: {}
                    })
                    .then(async (result) => {
                        if (result.error) {
                            showStripeErrorMessage(result.error.message);
                        } else {
                            return await fetch("{{ url("stripe_payment") }}", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                    "X-Requested-With": "XMLHttpRequest",
                                    "ECCUBE-CSRF-TOKEN": "{{ csrf_token(constant('Eccube\\Common\\Constant::TOKEN_NAME')) }}"
                                },
                                body: JSON.stringify({
                                    paymentMethodId: result.paymentMethod.id,
                                    isSavingCard: isSavingCard ? true : false,
                                })
                            });
                        }
                    })
                    .then((result) => {
                        // ここらへんで3Dセキュアのモーダルが表示されるので一旦オーバーレイ解除
                        const overlay = document.querySelector('.bg-load-overlay');
                        overlay.remove();
                        return result.json()
                    })
                    .then((paymentData) => {
                        if (paymentData.requiresAction) {
                            stripeHandleAction(paymentData.clientSecret);
                        } else if (paymentData.error) {
                            showStripeErrorMessage(paymentData.error)
                        } else {
                            redirectToHomepage(paymentData.clientSecret)
                        }
                    })
            }

            function stripeHandleAction(clientSecret) {
                stripe
                    .confirmCardPayment(clientSecret)
                    .then((result) => {
                        loadingOverlay();
                        if (result.error) {
                            showStripeErrorMessage(result.error.message)
                        } else {
                            $('#{{ form.stripe_payment_intent_id.vars.id }}').val(result.paymentIntent.id)
                            const form = document.getElementById('shopping-form');
                            form.submit();
                        }
                    });
            }

            function redirectToHomepage(clientSecret) {
                location.href = '{{ url('homepage') }}';
            }

            function showStripeErrorMessage(message) {
                const errorElement = document.getElementById('card-errors');
                errorElement.textContent = message;
                const overlay = document.querySelector('.bg-load-overlay');
                overlay.remove();
            }

        </script>
    </div>
{% endif %}
